initSidebarItems({"derive":[["WorldQuery","Implement `WorldQuery` to use a struct as a parameter in a query"]],"enum":[["QueryEntityError","An error that occurs when retrieving a specific [`Entity`]’s query result."]],"struct":[["Access","`Access` keeps track of read and write accesses to values within a collection."],["Added","Filter that retrieves components of type `T` that have been added since the last execution of this system."],["AddedFetch","The [`Fetch`] of [`Added`]."],["AddedState","The [`FetchState`] of [`Added`]."],["AnyOf","The `AnyOf` query parameter fetches entities with any of the component types included in T."],["ChangeTrackers","[`WorldQuery`] that tracks changes and additions for component `T`."],["ChangeTrackersFetch","The [`Fetch`] of [`ChangeTrackers`]."],["ChangeTrackersState","The [`FetchState`] of [`ChangeTrackers`]."],["Changed","Filter that retrieves components of type `T` that have been changed since the last execution of this system."],["ChangedFetch","The [`Fetch`] of [`Changed`]."],["ChangedState","The [`FetchState`] of [`Changed`]."],["EntityFetch","The [`Fetch`] of [`Entity`]."],["EntityState","The [`FetchState`] of [`Entity`]."],["FilteredAccess",""],["FilteredAccessSet",""],["NopFetch","[`Fetch`] that does not actually fetch anything"],["OptionFetch","The [`Fetch`] of `Option<T>`."],["OptionState","The [`FetchState`] of `Option<T>`."],["Or","A filter that tests if any of the given filters apply."],["OrFetch","The [`Fetch`] of [`Or`]."],["QueryCombinationIter",""],["QueryIter","An [`Iterator`] over query results of a `Query`."],["QueryState","Provides scoped access to a [`World`] state according to a given [`WorldQuery`] and query filter."],["ReadFetch","The [`Fetch`] of `&T`."],["ReadOnlyWriteFetch","The [`ReadOnlyFetch`] of `&mut T`."],["ReadState","The [`FetchState`] of `&T`."],["With","Filter that selects entities with a component `T`."],["WithFetch","The [`Fetch`] of [`With`]."],["WithState","The [`FetchState`] of [`With`]."],["Without","Filter that selects entities without a component `T`."],["WithoutFetch","The [`Fetch`] of [`Without`]."],["WithoutState","The [`FetchState`] of [`Without`]."],["WriteFetch","The [`Fetch`] of `&mut T`."],["WriteState","The [`FetchState`] of `&mut T`."]],"trait":[["Fetch","Types that implement this trait are responsible for fetching query items from tables or archetypes."],["FetchState","State used to construct a Fetch. This will be cached inside `QueryState`, so it is best to move as much data / computation here as possible to reduce the cost of constructing Fetch."],["FilterFetch","Extension trait for [`Fetch`] containing methods used by query filters. This trait exists to allow “short circuit” behaviors for relevant query filter fetches."],["ReadOnlyFetch","A fetch that is read only."],["WorldQuery","Types that can be queried from a [`World`]."]],"type":[["QueryItem",""]]});