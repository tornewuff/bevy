initSidebarItems({"derive":[["AppLabel",""],["DynamicPlugin","Generates a dynamic plugin entry point function for the given `Plugin` type.  "]],"enum":[["CoreStage","The names of the default App stages"],["RunMode","Determines the method used to run an [App]â€™s  `Schedule`."],["StartupStage","The names of the default App startup stages"]],"mod":[["prelude",""]],"struct":[["App","Containers of app logic and data"],["AppExit","An event that indicates the app should exit. This will fully exit the app process."],["PluginGroupBuilder","Facilitates the creation and configuration of a [`PluginGroup`]. Provides a build ordering to ensure that [`Plugin`]s which produce/require a resource are built before/after dependent/depending [`Plugin`]s."],["ScheduleRunnerPlugin","Configures an `App` to run its `Schedule` according to a given [`RunMode`]"],["ScheduleRunnerSettings","Configuration information for [`ScheduleRunnerPlugin`]."],["StartupSchedule","The label for the Startup `Schedule`, which runs once at the beginning of the app."]],"trait":[["AppLabel","Defines a set of strongly-typed labels for a class of objects"],["Plugin","A collection of Bevy App logic and configuration"],["PluginGroup","Combines multiple [`Plugin`]s into a single unit."]],"type":[["CreatePlugin","Type representing an unsafe function that returns a mutable pointer to a [`Plugin`]. Used for dynamically loading plugins. See `bevy_dynamic_plugin/src/loader.rs#dynamically_load_plugin`"]]});